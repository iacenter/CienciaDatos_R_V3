Data Visualization
========================================================
author: Alan Ponce
date: `r Sys.Date()` 
autosize: true 


<div align="center">
<img src="imgs/ia_center.jpeg" width=700 height=600>
</div>


```{r, echo = FALSE}

#-- Load a library
library(tidyverse)
library(gapminder)
library(data.table)
library(readxl)
library(gdata)
library(XLConnect)
library(haven)
library(lubridate)
library(googlesheets4)

```

Agenda
========================================================
type: section

- Quick recap
  - Tidyyverse
  - Importing data
  - Cleaning data
- Data Visualization
- Conclusions
- Q&A

R Base: Visualization
========================================================
type: section

base package and ggplot2, part 1 - plot
========================================================

```{r}

head(mtcars)

# Plot the correct variables of mtcars
plot(mtcars$wt, mtcars$mpg)

```

base package and ggplot2, part 1 - plot
========================================================

```{r}

str(mtcars)

# Change cyl inside mtcars to a factor
mtcars$fcyl <- as.factor(mtcars$cyl)


```

base package and ggplot2, part 1 - plot
========================================================

```{r}

# Make the same plot as in the first instruction but using a factor variable
plot(mtcars$wt, mtcars$mpg, col = mtcars$fcyl)

```

base package and ggplot2
========================================================

```{r}

plot(x = mtcars$wt, y = mtcars$mpg,
     pch = 16, frame = TRUE,
     xlab = "wt", ylab = "mpg", col = "#2E9FDF")


```



base package and ggplot2
========================================================

```{r}

hist(mtcars$hp)

```

base package and ggplot2
========================================================

```{r}


hist(mtcars$hp,,
     xlab = "Gross horsepower", 
     main = "Histogram of Motor Trend Car Road Tests",
     ylim = c(0,10))

```

base package and ggplot2
========================================================

```{r}

head(iris)

pairs(iris[1:4])

```


base package and ggplot2
========================================================

```{r}

head(iris)

pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
      pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])

```

base package and ggplot2
========================================================

```{r}

head(iris)

plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)

```

base package and ggplot2
========================================================

```{r}

head(iris)

plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = 15)

```

base package and ggplot2
========================================================

```{r}

head(iris)

plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = "A")

```

base package and ggplot2
========================================================

pch 21:25 also specify an edge colour (col) and a background colour (bg)

```{r}

head(iris)

plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = 21, bg = "blue")

```

base package and ggplot2
========================================================

lets settle on solid circles (pch = 16)

```{r}

head(iris)

plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = 16)

```

base package and ggplot2
========================================================

We can change the size of the points with “cex”

```{r}

plot(iris$Sepal.Length, iris$Petal.Length,
     col = iris$Species,
     pch = 16,
     cex = 2)

```
base package and ggplot2
========================================================

- Barplot

```{r}

head(mtcars)

barplot(mtcars$cyl)

```


base package and ggplot2
========================================================

- Barplot

```{r}

dragons <- data.frame(
  TalonLength = c(20.9, 58.3, 35.5),
  SE = c(4.5, 6.3, 5.5),
  Population = c("England", "Scotland", "Wales"))

dragons

```

base package and ggplot2
========================================================

- Barplot

```{r}

barplot(dragons$TalonLength, names = dragons$Population)

```


base package and ggplot2
========================================================

- Barplot

```{r}

head(VADeaths)

# Subset
x <- VADeaths[1:3, "Rural Male"]
x


# Bar plot of one variable
barplot(x)


```

base package and ggplot2
========================================================

- Barplot

```{r}

head(x)

# Horizontal bar plot
barplot(x, horiz = TRUE)

```

base package and ggplot2
========================================================

- Barplot

```{r}

head(x)

# Change group names
barplot(x, names.arg = c("A", "B", "C"))


```

base package and ggplot2
========================================================

- Barplot

```{r}

head(x)

# Change color
# Change border and fill color using one single color
barplot(x, col = "white", border = "steelblue")

```

base package and ggplot2
========================================================

- Barplot

```{r}

head(x)


# Change the color of border.
#  Use different colors for each group
barplot(x, col = "white",
        border = c("#999999", "#E69F00", "#56B4E9"))


```

base package and ggplot2
========================================================

- Barplot

```{r}

head(x)

# Change fill color : single color
barplot(x)

barplot(x, col = "steelblue")

```


base package and ggplot2
========================================================

- Barplot

```{r}

head(x)

# Change fill color: multiple colors
barplot(x, col = c("#999999", "#E69F00", "#56B4E9"))


```

base package and ggplot2
========================================================

- Barplot

```{r}

# Change main title and axis labels

head(x)

# Change color (col = "gray") and remove frame
barplot(x, main = "Death Rates in Virginia",
        xlab = "Age", ylab = "Rate")


```
base package and ggplot2
========================================================

- Stacked bar plots

```{r}

# Change main title and axis labels

head(VADeaths)

barplot(VADeaths,
         col = c("lightblue", "mistyrose", "lightcyan", 
                 "lavender", "cornsilk"),
        legend = rownames(VADeaths))

```


base package and ggplot2
========================================================

- Grouped bar plots

```{r}

# Change main title and axis labels

head(VADeaths)

barplot(VADeaths,
         col = c("lightblue", "mistyrose", "lightcyan", 
                 "lavender", "cornsilk"),
        legend = rownames(VADeaths), beside = TRUE)


```
base package and ggplot2
========================================================

- Grouped bar plots

```{r}

#Run all chunck code

# Define a set of colors
my_colors <- c("lightblue", "mistyrose", "lightcyan", 
                 "lavender", "cornsilk")
# Bar plot
barplot(VADeaths, col = my_colors, beside = TRUE)

# Add legend
legend("topleft", legend = rownames(VADeaths), 
       fill = my_colors, box.lty = 0, cex = 0.8
       )

```

Ggplot
========================================================
type: section

- The Grammar of Graphics

- <https://www.springer.com/gp/book/9780387245447>



Aesthetics
========================================================

Aesthetic mappings are the cornerstone of the grammar of graphics plotting concept. This is where the magic happens - converting continuous and categorical data into visual scales that provide access to a large amount of information in a very short time

```{r}

ggplot(iris, 
       aes(x = Sepal.Length, y = Sepal.Width)) +
        geom_point()

```



Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

head(mtcars)

# 1 - Map mpg to x and cyl to y
ggplot(mtcars, aes(x = mpg, y = cyl)) +
  geom_point()

```



Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

head(mtcars)

# 2 - Reverse: Map cyl to x and mpg to y
ggplot(mtcars, aes(x = cyl, y = mpg)) +
  geom_point()

```



Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Change cyl inside mtcars to a factor
mtcars$fcyl <- as.factor(mtcars$cyl)

# 3 - Map wt to x, mpg to y and cyl to col
ggplot(mtcars, aes(x = wt, y = mpg, col = fcyl)) +
  geom_point()


```


Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Change cyl inside mtcars to a factor
#mtcars$fcyl <- as.factor(mtcars$cyl)

# Change shape and size of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, col = fcyl)) +
  geom_point(shape = 1, size = 4)


```

Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# 1 - Map cyl to fill
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
  geom_point(shape = 1, size = 4)


```

Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# 2 - Change shape and alpha of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
  geom_point(shape = 21, size = 4, alpha = 0.6)

```

Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# library(RColorBrewer)

# Define a hexadecimal color
my_color <- "#4ABEFF"

# Set the color aesthetic and attribute 
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
  geom_point(color = my_color)

```

Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Set the fill aesthetic and color, size and shape attributes
ggplot(mtcars, aes(x = wt, y = mpg, fill = fcyl)) +
  geom_point(size = 4, shape = 23, color = my_color)

```

Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Expand to draw points with alpha 0.5
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
  geom_point(alpha = 0.5)

```
Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Expand to draw points with shape 24 and color yellow
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
  geom_point(shape = 24, color = 'yellow')


```


Aesthetics
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Add mapping: factor(am) onto shape (now 4 aesthetics):
ggplot(mtcars, 
       aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am))) +
  geom_point()


```



Histograms
========================================================

Histograms are one of the most common and intuitive ways of showing distributions.

```{r}

# Print out head of mtcars
head(mtcars)

# 1 - Make a univariate histogram
ggplot(mtcars, aes(mpg)) +
  geom_histogram()

```

Histograms
========================================================

Histograms are one of the most common and intuitive ways of showing distributions.

```{r}

# Print out head of mtcars
head(mtcars)

# 2 - Plot 1, plus set binwidth to 1 in the geom layer
ggplot(mtcars, aes(mpg)) +
  geom_histogram(binwidth = 1)

```



Histograms
========================================================

Histograms are one of the most common and intuitive ways of showing distributions.

```{r}

# Print out head of mtcars
head(mtcars)

# 4 - plot 3, plus SET the fill attribute to "#377EB8"
ggplot(mtcars, aes(mpg)) +
  geom_histogram(binwidth = 1, fill = "#377EB8")

```



Bar
========================================================

geom_bar() makes the height of the bar proportional to the number of cases in each group 

```{r}

# Print out head of mtcars
head(mtcars)

# Change cyl inside mtcars to a factor
mtcars$fcyl <- as.factor(mtcars$cyl)

# Change cyl inside mtcars to a factor
mtcars$fam <- as.factor(mtcars$am)

# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = fcyl, fill = fam)) +
  geom_bar()

```

Bar
========================================================

dodge: place the bars next to each other.

```{r}

# Print out head of mtcars
head(mtcars)

# Change the position argument to "dodge""
ggplot(mtcars, aes(x = fcyl, fill = fam)) +
  geom_bar(position = "dodge")

```


Bar
========================================================

Overlapping bar plots

```{r}

# Print out head of mtcars
head(mtcars)

# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(0.2)

# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = fcyl, fill = fam)) + 
  geom_bar(position = posn_d)

```

Bar
========================================================

Overlapping bar plots

```{r}

# Print out head of mtcars
head(mtcars)

# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(0.2)

# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = fcyl, fill = fam)) + 
  geom_bar(position = posn_d, alpha = 0.6)

```

Bar
========================================================

Colors

```{r}

# Print out head of mtcars
head(mtcars)

# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = fcyl, fill = fam)) +
  geom_bar() +
  scale_fill_brewer(palette = "Set1")

```


Line plots
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Print out head of economics
head(economics)

# Basic line plot
ggplot(data=economics, aes(x=date, y=pop))+
  geom_line()

```

Line plots
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Print out head of economics
head(economics)

# Plot a subset of the data
ggplot(data=subset(economics, date > as.Date("2006-1-1")), 
       aes(x=date, y=pop))+geom_line()

```


Line plots
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Print out head of economics
head(economics)

# Plot unemploy as a function of date using a line plot
ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line()

```

Line plots
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Print out head of Orange
head(Orange)

ggplot(Orange) +
  geom_line(aes(x = age, y = circumference, colour = Tree))

```


Line plots
========================================================

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

```{r}

# Print out head of Orange
head(Orange)

ggplot(Orange) +
  geom_line(aes(x = age, y = circumference, linetype = Tree))

```




